services:
  glide-frontend:
    build:
      context: ./GLiDe-Frontend
      dockerfile: Dockerfile.dev
    ports:
      - "4201:4200"
    volumes:
      - ./GLiDe-Frontend:/app
      - /app/node_modules
    networks:
      - app-network
    command: npm run start
    environment:
      GOOGLE_CLIENT: ${GOOGLE_CLIENT}

  gli-de-admin:
    build:
      context: ./GLiDe-Admin
      dockerfile: Dockerfile
    ports:
      - "4202:80"
    networks:
      - app-network

  glide-gamification-engine:
    build:
      context: ./GLiDe-Gamification-Engine
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy
    restart: always
    environment:
      DB_HOST: db
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      BACKEND: glide-backend
      DB_PASSWORD: ${DB_PASSWORD}

  glide-backend:
    build:
      context: ./GLiDe-Backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy
    restart: always
    environment:
      DB_HOST: db
      GAMIFICATION_ENGINE: glide-gamification-engine
      GOOGLE_CLIENT: ${GOOGLE_CLIENT}
      DB_PASSWORD: ${DB_PASSWORD}

  db:
    image: postgres
    container_name: db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432"
    networks:
      - app-network
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data: